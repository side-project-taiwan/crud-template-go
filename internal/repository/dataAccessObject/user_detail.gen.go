// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dataAccessObject

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sample/internal/repository/model"
)

func newUserDetail(db *gorm.DB, opts ...gen.DOOption) userDetail {
	_userDetail := userDetail{}

	_userDetail.userDetailDo.UseDB(db, opts...)
	_userDetail.userDetailDo.UseModel(&model.UserDetail{})

	tableName := _userDetail.userDetailDo.TableName()
	_userDetail.ALL = field.NewAsterisk(tableName)
	_userDetail.UdUserID = field.NewInt32(tableName, "ud_user_id")
	_userDetail.Gender = field.NewString(tableName, "gender")
	_userDetail.Birthday = field.NewTime(tableName, "birthday")
	_userDetail.UserHasTag = field.NewString(tableName, "user_has_tag")
	_userDetail.ProfilePicture = field.NewString(tableName, "profile_picture")
	_userDetail.Interests = field.NewString(tableName, "interests")
	_userDetail.PersonalDescription = field.NewString(tableName, "personal_description")
	_userDetail.Location = field.NewString(tableName, "location")
	_userDetail.RelationshipStatus = field.NewString(tableName, "relationship_status")
	_userDetail.LookingFor = field.NewString(tableName, "looking_for")
	_userDetail.PrivacySettings = field.NewString(tableName, "privacy_settings")
	_userDetail.SocialLinks = field.NewString(tableName, "social_links")
	_userDetail.IsBanned = field.NewBool(tableName, "is_banned")

	_userDetail.fillFieldMap()

	return _userDetail
}

type userDetail struct {
	userDetailDo userDetailDo

	ALL                 field.Asterisk
	UdUserID            field.Int32
	Gender              field.String
	Birthday            field.Time
	UserHasTag          field.String
	ProfilePicture      field.String
	Interests           field.String
	PersonalDescription field.String
	Location            field.String
	RelationshipStatus  field.String
	LookingFor          field.String
	PrivacySettings     field.String
	SocialLinks         field.String
	IsBanned            field.Bool

	fieldMap map[string]field.Expr
}

func (u userDetail) Table(newTableName string) *userDetail {
	u.userDetailDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDetail) As(alias string) *userDetail {
	u.userDetailDo.DO = *(u.userDetailDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDetail) updateTableName(table string) *userDetail {
	u.ALL = field.NewAsterisk(table)
	u.UdUserID = field.NewInt32(table, "ud_user_id")
	u.Gender = field.NewString(table, "gender")
	u.Birthday = field.NewTime(table, "birthday")
	u.UserHasTag = field.NewString(table, "user_has_tag")
	u.ProfilePicture = field.NewString(table, "profile_picture")
	u.Interests = field.NewString(table, "interests")
	u.PersonalDescription = field.NewString(table, "personal_description")
	u.Location = field.NewString(table, "location")
	u.RelationshipStatus = field.NewString(table, "relationship_status")
	u.LookingFor = field.NewString(table, "looking_for")
	u.PrivacySettings = field.NewString(table, "privacy_settings")
	u.SocialLinks = field.NewString(table, "social_links")
	u.IsBanned = field.NewBool(table, "is_banned")

	u.fillFieldMap()

	return u
}

func (u *userDetail) WithContext(ctx context.Context) *userDetailDo {
	return u.userDetailDo.WithContext(ctx)
}

func (u userDetail) TableName() string { return u.userDetailDo.TableName() }

func (u userDetail) Alias() string { return u.userDetailDo.Alias() }

func (u userDetail) Columns(cols ...field.Expr) gen.Columns { return u.userDetailDo.Columns(cols...) }

func (u *userDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDetail) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["ud_user_id"] = u.UdUserID
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["user_has_tag"] = u.UserHasTag
	u.fieldMap["profile_picture"] = u.ProfilePicture
	u.fieldMap["interests"] = u.Interests
	u.fieldMap["personal_description"] = u.PersonalDescription
	u.fieldMap["location"] = u.Location
	u.fieldMap["relationship_status"] = u.RelationshipStatus
	u.fieldMap["looking_for"] = u.LookingFor
	u.fieldMap["privacy_settings"] = u.PrivacySettings
	u.fieldMap["social_links"] = u.SocialLinks
	u.fieldMap["is_banned"] = u.IsBanned
}

func (u userDetail) clone(db *gorm.DB) userDetail {
	u.userDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDetail) replaceDB(db *gorm.DB) userDetail {
	u.userDetailDo.ReplaceDB(db)
	return u
}

type userDetailDo struct{ gen.DO }

func (u userDetailDo) Debug() *userDetailDo {
	return u.withDO(u.DO.Debug())
}

func (u userDetailDo) WithContext(ctx context.Context) *userDetailDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDetailDo) ReadDB() *userDetailDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDetailDo) WriteDB() *userDetailDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDetailDo) Session(config *gorm.Session) *userDetailDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDetailDo) Clauses(conds ...clause.Expression) *userDetailDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDetailDo) Returning(value interface{}, columns ...string) *userDetailDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDetailDo) Not(conds ...gen.Condition) *userDetailDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDetailDo) Or(conds ...gen.Condition) *userDetailDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDetailDo) Select(conds ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDetailDo) Where(conds ...gen.Condition) *userDetailDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDetailDo) Order(conds ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDetailDo) Distinct(cols ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDetailDo) Omit(cols ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDetailDo) Join(table schema.Tabler, on ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDetailDo) Group(cols ...field.Expr) *userDetailDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDetailDo) Having(conds ...gen.Condition) *userDetailDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDetailDo) Limit(limit int) *userDetailDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDetailDo) Offset(offset int) *userDetailDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDetailDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDetailDo) Unscoped() *userDetailDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDetailDo) Create(values ...*model.UserDetail) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDetailDo) CreateInBatches(values []*model.UserDetail, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDetailDo) Save(values ...*model.UserDetail) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDetailDo) First() (*model.UserDetail, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDetail), nil
	}
}

func (u userDetailDo) Take() (*model.UserDetail, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDetail), nil
	}
}

func (u userDetailDo) Last() (*model.UserDetail, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDetail), nil
	}
}

func (u userDetailDo) Find() ([]*model.UserDetail, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDetail), err
}

func (u userDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDetail, err error) {
	buf := make([]*model.UserDetail, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDetailDo) FindInBatches(result *[]*model.UserDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDetailDo) Attrs(attrs ...field.AssignExpr) *userDetailDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDetailDo) Assign(attrs ...field.AssignExpr) *userDetailDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDetailDo) Joins(fields ...field.RelationField) *userDetailDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDetailDo) Preload(fields ...field.RelationField) *userDetailDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDetailDo) FirstOrInit() (*model.UserDetail, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDetail), nil
	}
}

func (u userDetailDo) FirstOrCreate() (*model.UserDetail, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDetail), nil
	}
}

func (u userDetailDo) FindByPage(offset int, limit int) (result []*model.UserDetail, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDetailDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDetailDo) Delete(models ...*model.UserDetail) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDetailDo) withDO(do gen.Dao) *userDetailDo {
	u.DO = *do.(*gen.DO)
	return u
}
